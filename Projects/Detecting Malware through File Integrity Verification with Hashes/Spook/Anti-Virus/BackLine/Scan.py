import tkinter as tk
from tkinter import filedialog
import hashlib
import os
import shutil

# Constants
HASHES_FILE = r'D:\Education\B. Tech\Project\Minor\6th Sem\Minor-2\Anti-Virus\END-SEM\FINAL\Anti-Virus\Spook\Anti-Virus\Hashes.txt'
QUARANTINE_FOLDER = 'Quarantined Files'

def select_directory():
    target_dir = filedialog.askdirectory()
    scan_directory(target_dir)

def calculate_md5(file_path):
    try:
        with open(file_path, 'rb') as file:
            data = file.read()
            md5_hash = hashlib.md5(data).hexdigest()
            return md5_hash
    except IOError:
        return None

def scan_directory(target_dir):
    # Step 2: Calculate MD5 Hashes
    target_hashes = []
    for root, _, files in os.walk(target_dir):
        for file in files:
            file_path = os.path.join(root, file)
            md5_hash = calculate_md5(file_path)
            if md5_hash:
                target_hashes.append(md5_hash)

    # Step 3: Compare Hashes
    if compare_hashes(target_hashes):
        # Step 6: Malware found
        response = input("Malware found! Do you want to quarantine the file? [LEAVE/CAPTURE]: ")
        if response.lower() == 'capture':
            quarantine_files(target_dir)
            freeze_quarantine_folder()
    else:
        # Step 5: No malware found
        print("No malware found.")

def compare_hashes(target_hashes):
    # Step 4: Compare Hashes with Dataset
    with open(HASHES_FILE, 'r') as file:
        dataset_hashes = [line.strip() for line in file.readlines()]

    for hash_val in target_hashes:
        if hash_val in dataset_hashes:
            return True

    return False

def quarantine_files(target_dir):
    quarantine_dir = os.path.join(target_dir, QUARANTINE_FOLDER)

    if not os.path.exists(quarantine_dir):
        os.makedirs(quarantine_dir)

    for root, _, files in os.walk(target_dir):
        for file in files:
            file_path = os.path.join(root, file)
            dest_path = os.path.join(quarantine_dir, file)
            shutil.move(file_path, dest_path)

def freeze_quarantine_folder():
    quarantine_dir = os.path.join(os.getcwd(), QUARANTINE_FOLDER)
    try:
        os.chmod(quarantine_dir, 0o000)
        print(f"Quarantine folder '{QUARANTINE_FOLDER}' has been frozen.")
    except Exception as e:
        print(f"Error freezing the quarantine folder: {str(e)}")

def delete_quarantined_files():
    quarantine_dir = os.path.join(os.getcwd(), QUARANTINE_FOLDER)
    try:
        shutil.rmtree(quarantine_dir)
        print("Malware has been executed, you are safe now!")
    except Exception as e:
        print(f"Error deleting quarantined files: {str(e)}")

# Step 1: Ask for Target Directory through GUI
window = tk.Tk()
window.title("Malware Scanner")

frame = tk.Frame(window)
frame.pack(pady=20)

label = tk.Label(frame, text="Select the target directory:")
label.pack()

select_button = tk.Button(frame, text="Select Directory", command=select_directory)
select_button.pack(pady=10)

window.mainloop()

# Step 8: Delete Malware (optional)
response = input("Do you want to delete the malware(s)? [MERCY/EXECUTE]: ")
if response.lower() == 'execute':
    delete_quarantined_files()
else:
    print("You are still in danger!")
